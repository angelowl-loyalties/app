on:
  workflow_call:
    inputs:
      dockerfile:
        description: 'Dockerfile'
        required: true
        type: string
      workdir:
        description: 'Working directory'
        required: true
        type: string
      repository:
        description: 'Repository'
        required: true
        type: string

defaults:
  run:
    shell: bash

jobs:
  workflow-container:
    concurrency:
      group: deploy-${{ inputs.workdir }}
      cancel-in-progress: true
    environment: production
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::276374573009:role/gh-actions-oidc-role
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY:  ${{ inputs.repository }}
          IMAGE_TAG: ${{ github.sha }}
          DOCKERFILE: ${{ inputs.dockerfile }}
          WORKDIR: ${{ inputs.workdir }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -t $REGISTRY/$REPOSITORY:latest $WORKDIR -f $WORKDIR/$DOCKERFILE
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          docker push $REGISTRY/$REPOSITORY:latest

      - name: Deploy to EKS with Helm
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.2
        env:
          IMAGE_TAG: ${{ github.sha }}
          SERVICE: ${{ inputs.workdir }}
        with:
          aws-region: ap-southeast-1
          cluster-name: angelowl-eks-cluster
          config-files: .chart/values.${{env.SERVICE}}.yaml,.chart/values.yaml
          chart-path: .chart/
          namespace: angelowl
          values: deployment.imageTag=${{env.IMAGE_TAG}}
          name: angelowl-${{env.SERVICE}}
          atomic: true
          timeout: 5m0s --debug
